"""
internal > parse.py

This file contains the object which maps events to control types and allow for the detection of events.

Author: Miguel Guthridge
"""

import eventconsts
import helpers

class EventDetector:
    transport_controls = dict()
    fader_controls = dict()
    fader_button_controls = dict()
    knob_controls = dict()
    drum_pad_controls = dict()
    basic_controls = dict()
    
    def recognise(self, status, note):
        id_val = (status, note)
        channel = status & int('00001111', 2)
        if id_val in self.transport_controls:
            return eventconsts.TYPE_TRANSPORT, self.transport_controls[id_val]
        
        elif id_val in self.fader_controls:
            return eventconsts.TYPE_FADER, self.fader_controls[id_val]

        elif id_val in self.fader_button_controls:
            return eventconsts.TYPE_FADER_BUTTON, self.fader_button_controls[id_val]
        
        elif id_val in self.knob_controls:
            return eventconsts.TYPE_KNOB, self.knob_controls[id_val]
        
        elif (channel, note) in self.drum_pad_controls:
            # Use only note because drum pads use note events
            return eventconsts.TYPE_DRUM_PAD, self.drum_pad_controls[(channel, note)]
        
        elif id_val in self.basic_controls:
            return eventconsts.TYPE_BASIC, self.basic_controls[id_val]

        else:
            return eventconsts.TYPE_UNKNOWN, "Null"
    
    def addEvent(self, status, note, event_type, control):
        id_val = (status, note)
        channel = status & int('00001111', 2)
        if event_type == eventconsts.TYPE_TRANSPORT:
            self.transport_controls[id_val] = control
        
        elif event_type == eventconsts.TYPE_FADER:
            self.fader_controls[id_val] = control
        
        elif event_type == eventconsts.TYPE_FADER_BUTTON:
            self.fader_button_controls[id_val] = control
        
        elif event_type == eventconsts.TYPE_KNOB:
            self.knob_controls[id_val] = control
        
        elif event_type == eventconsts.TYPE_DRUM_PAD:
            # Use only note because drum pads use note events
            self.drum_pad_controls[(channel, note)] = control
        
        elif event_type == eventconsts.TYPE_BASIC:
            self.basic_controls[id_val] = control

    def dumpAutoinitScript(self):
        """Prints python text in order to make an autoinit script
        """
        print(helpers.getLineBreak())
        print("###  AUTOINIT SCRIPT  |  COPY FROM HERE DOWNWARDS  ###")
        print("")
        print("\"\"\"\nautoinit.py\n\nThis script is generated by the script.\n\nAuthor: The fact that this file is computer-generated poses some serious moral questions.\n\"\"\"")
        print("from internal.parse import detector")
        print("")
        print("")
        print("# Transport buttons")
        print("")
        for key, value in self.transport_controls.items():
            print("detector.addEvent(" + str(key[0]) + ", " + str(key[1])
                  + ", \"" + eventconsts.TYPE_TRANSPORT + "\", \""
                  + str(value) + "\")"
                )
        print("")
        print("")
        print("# Faders")
        print("")
        for key, value in self.fader_controls.items():
            print("detector.addEvent(" + str(key[0]) + ", " + str(key[1])
                  + ", \"" + eventconsts.TYPE_FADER + "\", \""
                  + str(value) + "\")"
                )
        print("")
        print("")
        print("# Fader Buttons")
        print("")
        for key, value in self.fader_button_controls.items():
            print("detector.addEvent(" + str(key[0]) + ", " + str(key[1])
                  + ", \"" + eventconsts.TYPE_FADER_BUTTON + "\", \""
                  + str(value) + "\")"
                )
        print("")
        print("")
        print("# Knobs")
        print("")
        for key, value in self.knob_controls.items():
            print("detector.addEvent(" + str(key[0]) + ", " + str(key[1])
                  + ", \"" + eventconsts.TYPE_KNOB + "\", \""
                  + str(value) + "\")"
                )
        print("")
        print("")
        print("# Drum pads")
        print("")
        for key, value in self.drum_pad_controls.items():
            print("detector.addEvent(" + str(key[0]) + ", " + str(key[1])
                  + ", \"" + eventconsts.TYPE_DRUM_PAD + "\", \""
                  + str(value) + "\")"
                )
        print("")
        print("")
        print("###  AUTOINIT SCRIPT  |  COPY FROM HERE UPWARDS  ###")
        print(helpers.getLineBreak())
        print("")
        print("In order to make your controller initialise automatically,")
        print("copy the above block of text into a blank text file.")
        print("Save the file in the script's directory under the name `autoinit.py`.")
        return ""
        
        


detector = EventDetector()





